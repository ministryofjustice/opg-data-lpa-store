// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package shared

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockLogger creates a new instance of mockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogger {
	mock := &mockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogger is an autogenerated mock type for the logger type
type mockLogger struct {
	mock.Mock
}

type mockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogger) EXPECT() *mockLogger_Expecter {
	return &mockLogger_Expecter{mock: &_m.Mock}
}

// Error provides a mock function for the type mockLogger
func (_mock *mockLogger) Error(s string, vs ...any) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	_mock.Called(_ca...)
	return
}

// mockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type mockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - s
//   - vs
func (_e *mockLogger_Expecter) Error(s interface{}, vs ...interface{}) *mockLogger_Error_Call {
	return &mockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockLogger_Error_Call) Run(run func(s string, vs ...any)) *mockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockLogger_Error_Call) Return() *mockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Error_Call) RunAndReturn(run func(s string, vs ...any)) *mockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type mockLogger
func (_mock *mockLogger) Info(s string, vs ...any) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	_mock.Called(_ca...)
	return
}

// mockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type mockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - s
//   - vs
func (_e *mockLogger_Expecter) Info(s interface{}, vs ...interface{}) *mockLogger_Info_Call {
	return &mockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockLogger_Info_Call) Run(run func(s string, vs ...any)) *mockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockLogger_Info_Call) Return() *mockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Info_Call) RunAndReturn(run func(s string, vs ...any)) *mockLogger_Info_Call {
	_c.Run(run)
	return _c
}
