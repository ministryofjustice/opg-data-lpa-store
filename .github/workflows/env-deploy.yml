name: "[Job] Deploy to Environment"

on:
  workflow_call:
    inputs:
      workspace_name:
        description: "The terraform workspace to target for environment actions"
        required: true
        type: string
      version_tag:
        description: "The docker image tag to deploy in the environment"
        required: true
        type: string
      apply:
        description: "Whether to apply the deployment"
        required: false
        type: boolean
        default: false
    secrets:
      allowlist_deploy_key:
        description: "SSH Deploy Key"
        required: true
      aws_access_key_id:
        description: "AWS Access Key ID"
        required: true
      aws_secret_access_key:
        description: "AWS Secret Access Key"
        required: true
      github_access_token:
        description: "Github Token"
        required: true
    outputs:
      base_url:
        description: "Base URL of API"
        value: ${{ jobs.terraform_environment_workflow.outputs.url }}

jobs:
  terraform_environment_workflow:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.apply && inputs.workspace_name || null }}
      url: ${{ steps.terraform_outputs.outputs.url }}
    outputs:
      url: ${{ steps.terraform_outputs.outputs.url }}
    env:
      tf_dir: "./terraform/environment"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: "0"
      - uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # 1.0.8
      - name: "Parse terraform version [directory: ${{ env.tf_dir }}]"
        id: tf_version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@ea1e81f43e7593acd74cc114085930f5f54914a2 # v3.1.7
        with:
          terraform_directory: ${{ env.tf_dir }}
      - name: "Terraform version [${{ steps.tf_version.outputs.version }}]"
        run: echo "terraform version [${{ steps.tf_version.outputs.version }}]" >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ env.tf_dir }}
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.tf_version.outputs.version }}
          terraform_wrapper: false
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGLpaStoreGithubAction
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.allowlist_deploy_key }}

      #Â AWS API Gateway doesn't support OpenAPI 3.1, so downgrade to 3.0
      - name: Compile OpenAPI file
        run: make build-apigw-openapi-spec

      - name: Lint Terraform
        run: terraform fmt -check -recursive
        working-directory: ${{ env.tf_dir }}
        continue-on-error: true

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ${{ env.tf_dir }}

      - name: Terraform Plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_app_version: ${{ inputs.version_tag }}
        run: |
          terraform workspace show
          terraform plan -lock-timeout=300s -input=false -parallelism=30 -out=terraform.plan
        working-directory: ${{ env.tf_dir }}

      - name: Terraform Apply
        if: inputs.apply == true
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_app_version: ${{ inputs.version_tag }}
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30 terraform.plan
        working-directory: ${{ env.tf_dir }}

      - name: Terraform Outputs
        if: inputs.apply == true
        id: terraform_outputs
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_app_version: ${{ inputs.version_tag }}
        run: |
          echo "url=$(terraform output -raw base_url)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.tf_dir }}
