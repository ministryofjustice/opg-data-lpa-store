name: "[Job] Docker Build, Scan and Push to ECR"

on:
  workflow_call:
    inputs:
      docker_tag:
        description: "Tag for docker image"
        required: true
        type: string
      checkout_tag:
        description: "Ref or tag to checkout"
        default: ${{ github.ref }}
        required: false
        type: string
    secrets:
      aws_access_key_id:
        description: "AWS Access Key ID"
        required: true
      aws_secret_access_key:
        description: "AWS Secret Access Key"
        required: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: write
  security-events: write
  pull-requests: read

jobs:
  docker_build_scan_push:
    strategy:
      matrix:
        include:
          - ecr_repository: lpa-store/lambda/api-create
            container: lambda-create
          - ecr_repository: lpa-store/lambda/api-get
            container: lambda-get
          - ecr_repository: lpa-store/lambda/api-getstatic
            container: lambda-getstatic
          - ecr_repository: lpa-store/lambda/api-update
            container: lambda-update
          - ecr_repository: lpa-store/lambda/api-getlist
            container: lambda-getlist
          - ecr_repository: lpa-store/lambda/api-getupdates
            container: lambda-getupdates
          - ecr_repository: lpa-store/fixtures
            container: fixtures
    runs-on: ubuntu-latest
    name: ${{ matrix.ecr_repository }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.checkout_tag }}

      - name: Build ${{ matrix.ecr_repository }} Image
        id: build_image
        run: |
          docker compose build ${{ matrix.container }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/lpa-store-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions
      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: true
          registries: 311462405659

      - name: Trivy Image Vulnerability Scanner for ${{ matrix.ecr_repository }}
        id: trivy_scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ matrix.ecr_repository }}:latest
          severity: "HIGH,CRITICAL"
          format: "sarif"
          output: "trivy-results.sarif"
          vuln-type: 'os,library'
      - name: Upload Trivy scan results to GitHub Security tab for ${{ matrix.ecr_repository }}
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v4.31.0
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push ${{ matrix.ecr_repository }} Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.ecr_repository }}
        run: |
          docker tag ${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.docker_tag }}
          if ${{ github.workflow == 'Main pipeline Workflow' }}; then
            docker tag ${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker tag ${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ inputs.docker_tag }}
          fi
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
