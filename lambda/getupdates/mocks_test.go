// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"

	"github.com/aws/aws-lambda-go/events"
	"github.com/ministryofjustice/opg-data-lpa-store/internal/shared"
	mock "github.com/stretchr/testify/mock"
)

// newMockLogger creates a new instance of mockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogger {
	mock := &mockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogger is an autogenerated mock type for the Logger type
type mockLogger struct {
	mock.Mock
}

type mockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogger) EXPECT() *mockLogger_Expecter {
	return &mockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type mockLogger
func (_mock *mockLogger) Debug(s string, vs ...any) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	_mock.Called(_ca...)
	return
}

// mockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type mockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - s string
//   - vs ...any
func (_e *mockLogger_Expecter) Debug(s interface{}, vs ...interface{}) *mockLogger_Debug_Call {
	return &mockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockLogger_Debug_Call) Run(run func(s string, vs ...any)) *mockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockLogger_Debug_Call) Return() *mockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Debug_Call) RunAndReturn(run func(s string, vs ...any)) *mockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type mockLogger
func (_mock *mockLogger) Error(s string, vs ...any) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	_mock.Called(_ca...)
	return
}

// mockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type mockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - s string
//   - vs ...any
func (_e *mockLogger_Expecter) Error(s interface{}, vs ...interface{}) *mockLogger_Error_Call {
	return &mockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockLogger_Error_Call) Run(run func(s string, vs ...any)) *mockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockLogger_Error_Call) Return() *mockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Error_Call) RunAndReturn(run func(s string, vs ...any)) *mockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type mockLogger
func (_mock *mockLogger) Info(s string, vs ...any) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	_mock.Called(_ca...)
	return
}

// mockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type mockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - s string
//   - vs ...any
func (_e *mockLogger_Expecter) Info(s interface{}, vs ...interface{}) *mockLogger_Info_Call {
	return &mockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockLogger_Info_Call) Run(run func(s string, vs ...any)) *mockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockLogger_Info_Call) Return() *mockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Info_Call) RunAndReturn(run func(s string, vs ...any)) *mockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// newMockStore creates a new instance of mockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStore {
	mock := &mockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockStore is an autogenerated mock type for the Store type
type mockStore struct {
	mock.Mock
}

type mockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStore) EXPECT() *mockStore_Expecter {
	return &mockStore_Expecter{mock: &_m.Mock}
}

// GetChanges provides a mock function for the type mockStore
func (_mock *mockStore) GetChanges(ctx context.Context, uid string) ([]shared.Update, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetChanges")
	}

	var r0 []shared.Update
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]shared.Update, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []shared.Update); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.Update)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStore_GetChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChanges'
type mockStore_GetChanges_Call struct {
	*mock.Call
}

// GetChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *mockStore_Expecter) GetChanges(ctx interface{}, uid interface{}) *mockStore_GetChanges_Call {
	return &mockStore_GetChanges_Call{Call: _e.mock.On("GetChanges", ctx, uid)}
}

func (_c *mockStore_GetChanges_Call) Run(run func(ctx context.Context, uid string)) *mockStore_GetChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStore_GetChanges_Call) Return(updates []shared.Update, err error) *mockStore_GetChanges_Call {
	_c.Call.Return(updates, err)
	return _c
}

func (_c *mockStore_GetChanges_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]shared.Update, error)) *mockStore_GetChanges_Call {
	_c.Call.Return(run)
	return _c
}

// newMockVerifier creates a new instance of mockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockVerifier {
	mock := &mockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockVerifier is an autogenerated mock type for the Verifier type
type mockVerifier struct {
	mock.Mock
}

type mockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockVerifier) EXPECT() *mockVerifier_Expecter {
	return &mockVerifier_Expecter{mock: &_m.Mock}
}

// VerifyHeader provides a mock function for the type mockVerifier
func (_mock *mockVerifier) VerifyHeader(aPIGatewayProxyRequest events.APIGatewayProxyRequest) (*shared.LpaStoreClaims, error) {
	ret := _mock.Called(aPIGatewayProxyRequest)

	if len(ret) == 0 {
		panic("no return value specified for VerifyHeader")
	}

	var r0 *shared.LpaStoreClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(events.APIGatewayProxyRequest) (*shared.LpaStoreClaims, error)); ok {
		return returnFunc(aPIGatewayProxyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(events.APIGatewayProxyRequest) *shared.LpaStoreClaims); ok {
		r0 = returnFunc(aPIGatewayProxyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.LpaStoreClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(events.APIGatewayProxyRequest) error); ok {
		r1 = returnFunc(aPIGatewayProxyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockVerifier_VerifyHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyHeader'
type mockVerifier_VerifyHeader_Call struct {
	*mock.Call
}

// VerifyHeader is a helper method to define mock.On call
//   - aPIGatewayProxyRequest events.APIGatewayProxyRequest
func (_e *mockVerifier_Expecter) VerifyHeader(aPIGatewayProxyRequest interface{}) *mockVerifier_VerifyHeader_Call {
	return &mockVerifier_VerifyHeader_Call{Call: _e.mock.On("VerifyHeader", aPIGatewayProxyRequest)}
}

func (_c *mockVerifier_VerifyHeader_Call) Run(run func(aPIGatewayProxyRequest events.APIGatewayProxyRequest)) *mockVerifier_VerifyHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 events.APIGatewayProxyRequest
		if args[0] != nil {
			arg0 = args[0].(events.APIGatewayProxyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockVerifier_VerifyHeader_Call) Return(lpaStoreClaims *shared.LpaStoreClaims, err error) *mockVerifier_VerifyHeader_Call {
	_c.Call.Return(lpaStoreClaims, err)
	return _c
}

func (_c *mockVerifier_VerifyHeader_Call) RunAndReturn(run func(aPIGatewayProxyRequest events.APIGatewayProxyRequest) (*shared.LpaStoreClaims, error)) *mockVerifier_VerifyHeader_Call {
	_c.Call.Return(run)
	return _c
}
