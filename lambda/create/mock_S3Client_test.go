// Code generated by mockery. DO NOT EDIT.

package main

import (
	context "context"

	shared "github.com/ministryofjustice/opg-data-lpa-store/internal/shared"
	mock "github.com/stretchr/testify/mock"
)

// mockS3Client is an autogenerated mock type for the S3Client type
type mockS3Client struct {
	mock.Mock
}

type mockS3Client_Expecter struct {
	mock *mock.Mock
}

func (_m *mockS3Client) EXPECT() *mockS3Client_Expecter {
	return &mockS3Client_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: ctx, objectKey, obj
func (_m *mockS3Client) Put(ctx context.Context, objectKey string, obj interface{}) error {
	ret := _m.Called(ctx, objectKey, obj)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, objectKey, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockS3Client_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockS3Client_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - objectKey string
//   - obj interface{}
func (_e *mockS3Client_Expecter) Put(ctx interface{}, objectKey interface{}, obj interface{}) *mockS3Client_Put_Call {
	return &mockS3Client_Put_Call{Call: _e.mock.On("Put", ctx, objectKey, obj)}
}

func (_c *mockS3Client_Put_Call) Run(run func(ctx context.Context, objectKey string, obj interface{})) *mockS3Client_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *mockS3Client_Put_Call) Return(_a0 error) *mockS3Client_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockS3Client_Put_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *mockS3Client_Put_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, file, path
func (_m *mockS3Client) UploadFile(ctx context.Context, file shared.FileUpload, path string) (shared.File, error) {
	ret := _m.Called(ctx, file, path)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 shared.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.FileUpload, string) (shared.File, error)); ok {
		return rf(ctx, file, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.FileUpload, string) shared.File); ok {
		r0 = rf(ctx, file, path)
	} else {
		r0 = ret.Get(0).(shared.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.FileUpload, string) error); ok {
		r1 = rf(ctx, file, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockS3Client_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type mockS3Client_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file shared.FileUpload
//   - path string
func (_e *mockS3Client_Expecter) UploadFile(ctx interface{}, file interface{}, path interface{}) *mockS3Client_UploadFile_Call {
	return &mockS3Client_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, file, path)}
}

func (_c *mockS3Client_UploadFile_Call) Run(run func(ctx context.Context, file shared.FileUpload, path string)) *mockS3Client_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.FileUpload), args[2].(string))
	})
	return _c
}

func (_c *mockS3Client_UploadFile_Call) Return(_a0 shared.File, _a1 error) *mockS3Client_UploadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockS3Client_UploadFile_Call) RunAndReturn(run func(context.Context, shared.FileUpload, string) (shared.File, error)) *mockS3Client_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// newMockS3Client creates a new instance of mockS3Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockS3Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockS3Client {
	mock := &mockS3Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
