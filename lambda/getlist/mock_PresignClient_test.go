// Code generated by mockery. DO NOT EDIT.

package main

import (
	context "context"

	shared "github.com/ministryofjustice/opg-data-lpa-store/internal/shared"
	mock "github.com/stretchr/testify/mock"
)

// mockPresignClient is an autogenerated mock type for the PresignClient type
type mockPresignClient struct {
	mock.Mock
}

type mockPresignClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPresignClient) EXPECT() *mockPresignClient_Expecter {
	return &mockPresignClient_Expecter{mock: &_m.Mock}
}

// PresignLpa provides a mock function with given fields: ctx, lpa
func (_m *mockPresignClient) PresignLpa(ctx context.Context, lpa shared.Lpa) (shared.Lpa, error) {
	ret := _m.Called(ctx, lpa)

	if len(ret) == 0 {
		panic("no return value specified for PresignLpa")
	}

	var r0 shared.Lpa
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.Lpa) (shared.Lpa, error)); ok {
		return rf(ctx, lpa)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.Lpa) shared.Lpa); ok {
		r0 = rf(ctx, lpa)
	} else {
		r0 = ret.Get(0).(shared.Lpa)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.Lpa) error); ok {
		r1 = rf(ctx, lpa)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPresignClient_PresignLpa_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresignLpa'
type mockPresignClient_PresignLpa_Call struct {
	*mock.Call
}

// PresignLpa is a helper method to define mock.On call
//   - ctx context.Context
//   - lpa shared.Lpa
func (_e *mockPresignClient_Expecter) PresignLpa(ctx interface{}, lpa interface{}) *mockPresignClient_PresignLpa_Call {
	return &mockPresignClient_PresignLpa_Call{Call: _e.mock.On("PresignLpa", ctx, lpa)}
}

func (_c *mockPresignClient_PresignLpa_Call) Run(run func(ctx context.Context, lpa shared.Lpa)) *mockPresignClient_PresignLpa_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.Lpa))
	})
	return _c
}

func (_c *mockPresignClient_PresignLpa_Call) Return(_a0 shared.Lpa, _a1 error) *mockPresignClient_PresignLpa_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPresignClient_PresignLpa_Call) RunAndReturn(run func(context.Context, shared.Lpa) (shared.Lpa, error)) *mockPresignClient_PresignLpa_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPresignClient creates a new instance of mockPresignClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPresignClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPresignClient {
	mock := &mockPresignClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
